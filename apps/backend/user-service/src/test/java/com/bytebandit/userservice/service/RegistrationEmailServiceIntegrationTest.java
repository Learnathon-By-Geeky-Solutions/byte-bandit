package com.bytebandit.userservice.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.bytebandit.userservice.enums.EmailTemplate;
import com.icegreen.greenmail.configuration.GreenMailConfiguration;
import com.icegreen.greenmail.junit5.GreenMailExtension;
import com.icegreen.greenmail.util.ServerSetupTest;
import jakarta.mail.Address;
import jakarta.mail.internet.MimeMessage;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.util.ReflectionTestUtils;
import org.thymeleaf.context.Context;
import org.thymeleaf.spring6.SpringTemplateEngine;

@ActiveProfiles("test")
class RegistrationEmailServiceIntegrationTest {
    
    @RegisterExtension
    static GreenMailExtension greenMailExtension =
        new GreenMailExtension(ServerSetupTest.SMTP_IMAP).withConfiguration(
                GreenMailConfiguration.aConfig()
                    .withUser("test-user@localhost", "test-user", "test-user-pwd"))
            .withPerMethodLifecycle(false);
    
    /**
     * Tests the {@code sendEmail} method of {@link RegistrationEmailService} to ensure that an
     * email is actually sent via SMTP using GreenMail as the test SMTP server.
     *
     * <p>This test verifies the following:</p>
     * <ul>
     *     <li>The email is successfully sent to the specified recipient.</li>
     *     <li>The subject of the email is set correctly to "REGISTRATION CONFIRMATION".</li>
     *     <li>The email body is generated by the {@link SpringTemplateEngine} and correctly
     *     injected into the email.</li>
     *     <li>The {@link SpringTemplateEngine#process} method is invoked with the expected
     *     template path and context.</li>
     * </ul>
     *
     * <p>Dependencies:</p>
     * <ul>
     *     <li>{@link GreenMailExtension} is used to simulate an SMTP server for capturing
     *     sent emails.</li>
     *     <li>{@link ReflectionTestUtils} is used to inject values into {@code backendHost} and
     *     {@code apiPrefix}, which are required to build the confirmation URL inside the service.
     *     </li>
     * </ul>
     *
     * @throws Exception if there is any issue during email sending or retrieval from GreenMail
     */
    @Test
    void sendEmail_ShouldActuallySendEmailViaSmtp() throws Exception {
        SpringTemplateEngine templateEngine = mock(SpringTemplateEngine.class);
        String expectedBody = "<html><body>Welcome, John!</body></html>";
        when(templateEngine.process(eq(EmailTemplate.REGISTRATION_CONFIRMATION.getTemplatePath()),
            any(Context.class))).thenReturn(expectedBody);
        
        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost("localhost");
        mailSender.setPort(ServerSetupTest.SMTP.getPort());
        mailSender.setUsername("test-user");
        mailSender.setPassword("test-user-pwd");
        
        RegistrationEmailService registrationEmailService =
            new RegistrationEmailService(templateEngine, mailSender);
        
        ReflectionTestUtils.setField(registrationEmailService, "backendHost",
            "http://localhost:8080");
        ReflectionTestUtils.setField(registrationEmailService, "apiPrefix", "/api");
        
        
        String recipient = "user@example.com";
        String fullName = "John Doe";
        String token = "abc123";
        UUID userId = UUID.randomUUID();
        registrationEmailService.sendEmail(recipient, fullName, token, userId);
        
        greenMailExtension.waitForIncomingEmail(1);
        MimeMessage[] receivedMessages = greenMailExtension.getReceivedMessages();
        
        assertThat(receivedMessages).hasSize(1);
        
        MimeMessage receivedMessage = receivedMessages[0];
        
        Address[] recipients = receivedMessage.getAllRecipients();
        assertThat(recipients).isNotNull();
        assertThat(recipients[0].toString()).hasToString(recipient);
        
        assertThat(receivedMessage.getSubject()).isEqualTo("REGISTRATION CONFIRMATION");
        
        verify(templateEngine).process(
            eq(EmailTemplate.REGISTRATION_CONFIRMATION.getTemplatePath()), any(Context.class));
    }
}
